import Head from "next/head";
import { useEffect } from "react";
import { useRouter } from "next/router";
import Period from "~/features/schedules/components/Period";
import Items from "~/features/schedules/components/Items";
import { api } from "~/utils/api";
import dayjs from "~/utils/dayjs";
import { monthItems, getScheduleInMonth } from "~/utils/schedule";
import Image from "next/image";

export default function Home() {
  const router = useRouter();
  const { id } = router.query;

  const url = api.url.exists.useQuery({ id: String(id) });

  const test = api.url.test.useQuery();
  console.log("test:", test);

  useEffect(() => {
    if (url.data === false) {
      // 存在しないURLの場合はトップページに戻す
      void router.push(`/`);
    }
  }, [url.data, router]);

  const schedules = api.schedule.fetch.useQuery({ urlId: String(id) });
  const months = monthItems(
    Number(dayjs().format("M")),
    Number(dayjs().year())
  );

  return (
    <>
      <Head>
        <title>OMAKA | 年間スケジュール、まとめるなら</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute top-0 hidden pr-24 sm:block  md:right-48 lg:right-96">
        <div className="flex w-12 cursor-pointer flex-col items-center pt-3 hover:bg-blue-100">
          <Image src="/print.png" alt="print" width={24} height={24} />
          <div className="text-xxs pt-2 text-center text-gray-500">印刷</div>
        </div>
      </div>
      <div className="absolute top-0 hidden pr-10 sm:block  md:right-48 lg:right-96">
        <div className="flex w-12 cursor-pointer flex-col items-center pt-3 hover:bg-blue-100">
          <Image src="/share.png" alt="share" width={24} height={24} />
          <div className="text-xxs pt-2 text-center text-gray-500">シェア</div>
        </div>
      </div>

      <main className="container mx-auto max-w-screen-xl gap-12 px-4 pt-3">
        <div className="relative flex justify-between">
          <Period
            startDate={dayjs().format()}
            endDate={dayjs().add(1, "years").format()}
          />
        </div>
        <div className="flex flex-col flex-nowrap justify-center pt-10 sm:flex-row sm:flex-wrap sm:justify-start">
          {schedules.isLoading ? (
            <div className="flex h-screen w-screen items-center justify-center">
              loading...
            </div>
          ) : (
            months.map((item, index) => (
              <div key={index} className="px-8 pb-8 sm:pb-16">
                <Items
                  urlId={String(id)}
                  date={item}
                  defaultItems={getScheduleInMonth(item, schedules.data ?? [])}
                />
              </div>
            ))
          )}
        </div>
      </main>
    </>
  );
}
